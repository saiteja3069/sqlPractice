1) Query all columns for all American cities in CITY with populations larger than 100000. The CountryCode for America is USA.
Ans: 

SELECT * FROM city where COUNTRYCODE = 'USA' and POPULATION >100000;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) Query all columns (attributes) for every row in the CITY table.
Ans: 

SELECT * FROM city;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) Query all columns for a city in CITY with the ID 1661.
Ans:

SELECT * FROM CITY WHERE ID = 1661;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------\
4) Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
Ans:

SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
Ans:

SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6) Query a list of CITY and STATE from the STATION table.
Ans:

SELECT CITY,STATE FROM STATION;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7) Query a list of CITY names from STATION with even ID numbers only. You may print the results in any order, but must exclude duplicates from your answer.
Ans:

SELECT DISTINCT(CITY) FROM STATION WHERE ID % 2 = 0;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8) Let N be the number of CITY entries in STATION, and let N' be the number of distinct CITY names in STATION; query the value of N-N' from STATION. In other words, find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
Ans:

SELECT COUNT(CITY) - COUNT(DISTINCT(CITY)) FROM STATION;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9)Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
Ans:

SELECT TOP 1 CITY,  LEN(CITY) FROM STATION ORDER BY LEN(CITY), CITY;
SELECT TOP 1 CITY, LEN(CITY) FROM STATION ORDER BY LEN(CITY) DESC, CITY;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10) Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
Ans:

/*SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE 'a%' OR CITY LIKE 'e%' OR CITY LIKE 'i%' OR CITY LIKE 'o%' OR CITY LIKE 'u%';*/

SELECT DISTINCT(CITY) FROM STATION WHERE CITY REGEXP '^[aeiou]';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11) Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
Ans:

SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u';

SELECT DISTINCT(CITY) FROM STATION WHERE CITY REGEXP '[aeiou]$';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12) Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
Ans:

SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE 'a%a' OR CITY LIKE 'a%e' OR CITY LIKE 'a%i' OR CITY LIKE 'a%o' OR CITY LIKE 'a%u' OR CITY LIKE 'e%a' OR CITY LIKE 'e%e' OR CITY LIKE 'e%i' OR CITY LIKE 'e%o' OR CITY LIKE 'e%u' OR CITY LIKE 'i%a' OR CITY LIKE 'i%e' OR CITY LIKE 'i%i' OR CITY LIKE 'i%o' OR CITY LIKE 'i%u'OR CITY LIKE 'o%a' OR CITY LIKE 'o%e' OR CITY LIKE 'o%i' OR CITY LIKE 'o%o' OR CITY LIKE 'o%u' OR CITY LIKE 'u%a' OR CITY LIKE 'u%e' OR CITY LIKE 'u%i' OR CITY LIKE 'u%o' OR CITY LIKE 'u%u';

SELECT DISTINCT(CITY) FROM STATION WHERE CITY REGEXP '^[aeiou]' and CITY REGEXP '[aeiou]$'
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13) Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT(CITY) FROM STATION WHERE CITY NOT LIKE 'a%' and CITY NOT LIKE 'e%' and CITY NOT LIKE 'i%' and CITY NOT LIKE 'o%' and CITY NOT LIKE 'u%';

SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[^aeiou]';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14) Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
Ans: 

SELECT DISTINCT CITY FROM STATION WHERE CITY NOT LIKE '%a' AND CITY NOT LIKE '%e' AND CITY NOT LIKE '%i' AND CITY NOT LIKE '%o' AND CITY NOT LIKE '%u';

SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[^aeiou]$';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15) Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
Ans:

SELECT DISTINCT CITY FROM STATION WHERE (CITY NOT LIKE 'a%' and CITY NOT LIKE 'e%' and CITY NOT LIKE 'i%' and CITY NOT LIKE 'o%' and CITY NOT LIKE 'u%') OR (CITY NOT LIKE '%a' AND CITY NOT LIKE '%e' AND CITY NOT LIKE '%i' AND CITY NOT LIKE '%o' AND CITY NOT LIKE '%u');

SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[^aeiou]' OR CITY REGEXP '[^aeiou]$';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16) Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
Ans:

SELECT DISTINCT CITY FROM STATION WHERE (CITY NOT LIKE 'a%' and CITY NOT LIKE 'e%' and CITY NOT LIKE 'i%' and CITY NOT LIKE 'o%' and CITY NOT LIKE 'u%') AND (CITY NOT LIKE '%a' AND CITY NOT LIKE '%e' AND CITY NOT LIKE '%i' AND CITY NOT LIKE '%o' AND CITY NOT LIKE '%u');

SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[^aeiou]' AND CITY REGEXP '[^aeiou]$'
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17) Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
Ans:

SELECT NAME FROM STUDENTS WHERE MARKS > 75 ORDER BY  RIGHT(NAME,3), ID;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
18) Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
Ans:

SELECT name from Employee order by name;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19) Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 2000  per month who have been employees for less than 10 months. Sort your result by ascending employee_id.
Ans:

SELECT name from Employee where salary > 2000 and months <10 order by employee_id;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20) Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with 3 sides of equal length.
Isosceles: It's a triangle with 2 sides of equal length.
Scalene: It's a triangle with 3 sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
Ans:

SELECT CASE
WHEN A+B<=C OR B+C<=A OR A+C<=B THEN 'Not A Triangle'
WHEN A<>B AND B<>C AND A<>C THEN 'Scalene'
WHEN A=B and B=C THEN 'Equilateral'
ELSE 'Isosceles'
END
FROM triangles;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21) Query a count of the number of cities in CITY having a Population larger 100000 than.
Ans:
select count(*) from CITY where population > 100000
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22) Query the total population of all cities in CITY where District is California.
Ans:
select sum(population) from city where district='California';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23) Query the average population of all cities in CITY where District is California.
Ans:
select avg(population) from city where district='California';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24) Query the average population for all cities in CITY, rounded down to the nearest integer.
Ans: 
select round(avg(population)) from city;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25) Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
Ans:
select sum(population) from city where countrycode='JPN';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
26) Query the difference between the maximum and minimum populations in CITY.
Ans:
select max(population)-min(population) from city;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
27) Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.
Ans:
select  ceil((avg(salary)) - avg(replace(salary, '0', ''))) from Employees
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
28) We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.
Ans:
select top 1 salary*months as maxsalary, COUNT(salary*months) from Employee group by salary*months order by salary*months desc;

select  salary*months as earnings, COUNT(*) from Employee group by earnings order by earnings desc limit 1;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29) Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of 2 decimal places.
The sum of all values in LONG_W rounded to a scale of 2 decimal places.
Ans:
select round(sum(LAT_N),2) as lat, round(sum(LONG_W),2) as lon from station;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
30) Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to 4  decimal places.
Ans: 
select round(sum(LAT_N),4) as lat from station where LAT_N BETWEEN 38.7880 and 137.2345;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
31) Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to  4 decimal places.
Ans:
select round(max(LAT_N),4) as lat from station where LAT_N < 137.2345;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
32) Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places.
Ans:
select round(LONG_W,4) from station where LAT_N IN(SELECT max(LAT_N) from station where lat_n < 137.2345)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
33) Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7880 . Round your answer to 4 decimal places.
Ans:
select round(LAT_N,4) from station where LAT_N > 38.7880 order by LAT_N limit 1
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
34) Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to  decimal places.
Ans:
select round(LONG_W,4) from station where LAT_N IN(SELECT min(LAT_N) from station where lat_n > 38.7780)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
35) Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
Ans:
select sum(city.population) 
from city 
left join country 
on city.countrycode = country.Code
where country.continent = 'Asia';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
36) Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
Ans:
select city.name
from city 
left join country 
on city.countrycode = country.Code
where country.continent = 'Africa';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
37) Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.
Ans:
select country.continent, floor(avg(city.population))
from city 
join country 
on city.countrycode = country.Code
group by country.continent;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
38) P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5)
* * * * * 
* * * * 
* * * 
* * 
*
Write a query to print the pattern P(20).
Ans:
declare @var int 
select @var = 20
while @var > 0
begin
print replicate(' * ', @var)
set @var = @var -1
end
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
39) P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
* 
* * 
* * * 
* * * * 
* * * * *
Write a query to print the pattern P(20).
Ans:

declare @var int 
select @var = 1
while @var <21
begin
print replicate(' * ', @var)
set @var = @var + 1
end
------------------------------------------------------------------------------------------------------------------------------------------------------------------------











